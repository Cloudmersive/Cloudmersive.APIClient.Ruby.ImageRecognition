=begin
#imageapi

#Image Recognition and Processing APIs let you use Machine Learning to recognize and process images, and also perform useful image modification operations.

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: unset

=end

require "uri"

module CloudmersiveImageRecognitionApiClient
  class EditApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Composite two images together
    # Composites two input images together; a layered image onto a base image.  The first image you input is the base image.  The second image (the layered image) will be composited on top of this base image.  Supports PNG transparency.  To control padding you can include transparent pixels at the border(s) of your layered images as appropriate.
    # @param location Location to composite the layered images; possible values are: \&quot;center\&quot;, \&quot;top-left\&quot;, \&quot;top-center\&quot;, \&quot;top-right\&quot;, \&quot;center-left\&quot;, \&quot;center-right\&quot;, \&quot;bottom-left\&quot;, \&quot;bottom-center\&quot;, \&quot;bottom-right\&quot;
    # @param base_image Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.
    # @param layered_image Image to layer on top of the base image.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def edit_composite_basic(location, base_image, layered_image, opts = {})
      data, _status_code, _headers = edit_composite_basic_with_http_info(location, base_image, layered_image, opts)
      return data
    end

    # Composite two images together
    # Composites two input images together; a layered image onto a base image.  The first image you input is the base image.  The second image (the layered image) will be composited on top of this base image.  Supports PNG transparency.  To control padding you can include transparent pixels at the border(s) of your layered images as appropriate.
    # @param location Location to composite the layered images; possible values are: \&quot;center\&quot;, \&quot;top-left\&quot;, \&quot;top-center\&quot;, \&quot;top-right\&quot;, \&quot;center-left\&quot;, \&quot;center-right\&quot;, \&quot;bottom-left\&quot;, \&quot;bottom-center\&quot;, \&quot;bottom-right\&quot;
    # @param base_image Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.
    # @param layered_image Image to layer on top of the base image.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def edit_composite_basic_with_http_info(location, base_image, layered_image, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EditApi.edit_composite_basic ..."
      end
      # verify the required parameter 'location' is set
      if @api_client.config.client_side_validation && location.nil?
        fail ArgumentError, "Missing the required parameter 'location' when calling EditApi.edit_composite_basic"
      end
      # verify the required parameter 'base_image' is set
      if @api_client.config.client_side_validation && base_image.nil?
        fail ArgumentError, "Missing the required parameter 'base_image' when calling EditApi.edit_composite_basic"
      end
      # verify the required parameter 'layered_image' is set
      if @api_client.config.client_side_validation && layered_image.nil?
        fail ArgumentError, "Missing the required parameter 'layered_image' when calling EditApi.edit_composite_basic"
      end
      # resource path
      local_var_path = "/image/edit/composite/{location}".sub('{' + 'location' + '}', location.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['image/png'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params["baseImage"] = base_image
      form_params["layeredImage"] = layered_image

      # http body (model)
      post_body = nil
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EditApi#edit_composite_basic\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Draw rectangle onto an image
    # Draw one or more rectangles, with customized visuals, onto an image
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def edit_draw_rectangle(request, opts = {})
      data, _status_code, _headers = edit_draw_rectangle_with_http_info(request, opts)
      return data
    end

    # Draw rectangle onto an image
    # Draw one or more rectangles, with customized visuals, onto an image
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def edit_draw_rectangle_with_http_info(request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EditApi.edit_draw_rectangle ..."
      end
      # verify the required parameter 'request' is set
      if @api_client.config.client_side_validation && request.nil?
        fail ArgumentError, "Missing the required parameter 'request' when calling EditApi.edit_draw_rectangle"
      end
      # resource path
      local_var_path = "/image/edit/draw/rectangle"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['image/png'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EditApi#edit_draw_rectangle\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Draw text onto an image
    # Draw one or more pieces of text, with customized visuals, onto an image
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def edit_draw_text(request, opts = {})
      data, _status_code, _headers = edit_draw_text_with_http_info(request, opts)
      return data
    end

    # Draw text onto an image
    # Draw one or more pieces of text, with customized visuals, onto an image
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def edit_draw_text_with_http_info(request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EditApi.edit_draw_text ..."
      end
      # verify the required parameter 'request' is set
      if @api_client.config.client_side_validation && request.nil?
        fail ArgumentError, "Missing the required parameter 'request' when calling EditApi.edit_draw_text"
      end
      # resource path
      local_var_path = "/image/edit/draw/text"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['image/png'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EditApi#edit_draw_text\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
