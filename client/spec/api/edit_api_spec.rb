=begin
#imageapi

#Image Recognition and Processing APIs let you use Machine Learning to recognize and process images, and also perform useful image modification operations.

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.14

=end

require 'spec_helper'
require 'json'

# Unit tests for CloudmersiveImageRecognitionApiClient::EditApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'EditApi' do
  before do
    # run before each test
    @instance = CloudmersiveImageRecognitionApiClient::EditApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of EditApi' do
    it 'should create an instance of EditApi' do
      expect(@instance).to be_instance_of(CloudmersiveImageRecognitionApiClient::EditApi)
    end
  end

  # unit tests for edit_auto_orient
  # Normalizes image rotation and removes EXIF rotation data
  # Automatically orients the input image based on EXIF information and then removes the EXIF information.  EXIF is an additional set of information stored in some images taken with cell phone cameras based on the orientation of the camera.  By normalizing rotation and removing EXIF data these images become much easier to process.
  # @param image_file Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'edit_auto_orient test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for edit_composite_basic
  # Composite two images together
  # Composites two input images together; a layered image onto a base image.  The first image you input is the base image.  The second image (the layered image) will be composited on top of this base image.  Supports PNG transparency.  To control padding you can include transparent pixels at the border(s) of your layered images as appropriate.
  # @param location Location to composite the layered images; possible values are: \&quot;center\&quot;, \&quot;top-left\&quot;, \&quot;top-center\&quot;, \&quot;top-right\&quot;, \&quot;center-left\&quot;, \&quot;center-right\&quot;, \&quot;bottom-left\&quot;, \&quot;bottom-center\&quot;, \&quot;bottom-right\&quot;
  # @param base_image Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.
  # @param layered_image Image to layer on top of the base image.
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'edit_composite_basic test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for edit_composite_precise
  # Composite two images together precisely
  # Composites two input images together; a layered image onto a base image. Position is based on distance in pixels from each side.  The first image you input is the base image.  The second image (the layered image) will be composited on top of this base image.  Supports PNG transparency.  To control padding you can include transparent pixels at the border(s) of your layered images as appropriate.  Providing multiple parameters in a single axis (for example top and bottom) is not recommended, since only one of the parameters will be used per axis.
  # @param base_image Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.
  # @param layered_image Image to layer on top of the base image.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :top Optional; Desired distance in pixels from the top of the base image to the top of the layered image.
  # @option opts [Integer] :bottom Optional; Desired distance in pixels from the bottom of the base image to the bottom of the layered image.
  # @option opts [Integer] :left Optional; Desired distance in pixels from the left side of the base image to the left side of the layered image.
  # @option opts [Integer] :right Optional; Desired distance in pixels from the right side of the base image to the right side of the layered image.
  # @option opts [Integer] :width Optional; Desired width of the layered image in pixels. Leave height empty or 0 to automatically scale the image proportionally.
  # @option opts [Integer] :height Optional; Desired height of the layered image in pixels. Leave width empty or 0 to automatically scale the image proportionally.
  # @return [String]
  describe 'edit_composite_precise test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for edit_contrast_adaptive
  # Adaptively adjust the contrast of the image to be more appealing and easy to see
  # Uses Gamma to adjust the contrast adaptively the way the human eye sees the world.  Results significantly improve the viewability and visual appeal of the image.
  # @param gamma Gamma value to adjust the contrast in the image.  Recommended value is 2.0.  Values between 0.0 and 1.0 will reduce contrast, while values above 1.0 will increase contrast.
  # @param image_file Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'edit_contrast_adaptive test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for edit_crop_circle
  # Crop an image to an circular area
  # Crop an image to a target circular area
  # @param left The left edge of the circular crop area in pixels (X).
  # @param top The top edge of the circular crop area in pixels (Y).
  # @param radius The radius of the circular crop area in pixels.
  # @param image_file Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'edit_crop_circle test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for edit_crop_rectangle
  # Crop an image to a rectangular area
  # Crop an image to a target rectangular area
  # @param left The left edge of the rectangular crop area in pixels (X).
  # @param top The top edge of the rectangular crop area in pixels (Y).
  # @param width The width of the rectangular crop area in pixels.
  # @param height The height of the rectangular crop area in pixels.
  # @param image_file Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'edit_crop_rectangle test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for edit_draw_polygon
  # Draw a polygon onto an image
  # Draw one or more polygons, with customized visuals, onto an image
  # @param request Polygon drawing request parameters
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'edit_draw_polygon test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for edit_draw_rectangle
  # Draw a rectangle onto an image
  # Draw one or more rectangles, with customized visuals, onto an image
  # @param request Draw rectangle parameters
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'edit_draw_rectangle test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for edit_draw_text
  # Draw text onto an image
  # Draw one or more pieces of text, with customized visuals, onto an image
  # @param request Draw text parameters
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'edit_draw_text test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for edit_drop_shadow
  # Add a customizeable drop shadow to an image
  # Add a customizeable drop shadow to the image
  # @param x Horizontal (X) offset of the drop shadow
  # @param y Vertical (Y) offset of the drop shadow
  # @param sigma Sigma (blur distance) of the drop shadow
  # @param opacity Opacity of the drop shadow; 0 is 0% and 100 is 100%
  # @param image_file Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'edit_drop_shadow test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for edit_invert
  # Invert, negate the colors in the image
  # Inverts (negates) all of the colors in the image.  If the image contains transparency, the transparency will first be removed prior to inverting the image.
  # @param image_file Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'edit_invert test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for edit_remove_exif_data
  # Remove EXIF data from the image
  # Removes any EXIF data and profiles .
  # @param image_file Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'edit_remove_exif_data test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for edit_remove_transparency
  # Remove transparency from the image
  # Removes any active transparency in the image.  Effectively renders the image at the same resolution, in the same file format, over a white background, thus removing transparency.
  # @param image_file Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'edit_remove_transparency test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for edit_rotate
  # Rotate an image any number of degrees
  # Rotates an image by an arbitrary number of degrees
  # @param degrees Degrees to rotate the image; values range from 0.0 to 360.0.
  # @param image_file Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'edit_rotate test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
