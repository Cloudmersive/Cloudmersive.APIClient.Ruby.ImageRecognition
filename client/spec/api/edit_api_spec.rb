=begin
#imageapi

#Image Recognition and Processing APIs let you use Machine Learning to recognize and process images, and also perform useful image modification operations.

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'spec_helper'
require 'json'

# Unit tests for CloudmersiveImageRecognitionApiClient::EditApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'EditApi' do
  before do
    # run before each test
    @instance = CloudmersiveImageRecognitionApiClient::EditApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of EditApi' do
    it 'should create an instance of EditApi' do
      expect(@instance).to be_instance_of(CloudmersiveImageRecognitionApiClient::EditApi)
    end
  end

  # unit tests for edit_composite_basic
  # Composite two images together
  # Composites two input images together; a layered image onto a base image.  The first image you input is the base image.  The second image (the layered image) will be composited on top of this base image.  Supports PNG transparency.  To control padding you can include transparent pixels at the border(s) of your layered images as appropriate.
  # @param location Location to composite the layered images; possible values are: \&quot;center\&quot;, \&quot;top-left\&quot;, \&quot;top-center\&quot;, \&quot;top-right\&quot;, \&quot;center-left\&quot;, \&quot;center-right\&quot;, \&quot;bottom-left\&quot;, \&quot;bottom-center\&quot;, \&quot;bottom-right\&quot;
  # @param base_image Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.
  # @param layered_image Image to layer on top of the base image.
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'edit_composite_basic test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for edit_draw_rectangle
  # Draw rectangle onto an image
  # Draw one or more rectangles, with customized visuals, onto an image
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'edit_draw_rectangle test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for edit_draw_text
  # Draw text onto an image
  # Draw one or more pieces of text, with customized visuals, onto an image
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'edit_draw_text test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
