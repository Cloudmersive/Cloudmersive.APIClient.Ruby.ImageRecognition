=begin
#imageapi

#Image Recognition and Processing APIs let you use Machine Learning to recognize and process images, and also perform useful image modification operations.

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: unset

=end

require 'spec_helper'
require 'json'

# Unit tests for CloudmersiveImageRecognitionApiClient::EditApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'EditApi' do
  before do
    # run before each test
    @instance = CloudmersiveImageRecognitionApiClient::EditApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of EditApi' do
    it 'should create an instance of EditApi' do
      expect(@instance).to be_instance_of(CloudmersiveImageRecognitionApiClient::EditApi)
    end
  end

  # unit tests for edit_auto_orient
  # Normalizes image rotation and removes EXIF rotation data
  # Automatically orients the input image based on EXIF information and then removes the EXIF information.  EXIF is an additional set of information stored in some images taken with cell phone cameras based on the orientation of the camera.  By normalizing rotation and removing EXIF data these images become much easier to process.
  # @param image_file Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'edit_auto_orient test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for edit_composite_basic
  # Composite two images together
  # Composites two input images together; a layered image onto a base image.  The first image you input is the base image.  The second image (the layered image) will be composited on top of this base image.  Supports PNG transparency.  To control padding you can include transparent pixels at the border(s) of your layered images as appropriate.
  # @param location Location to composite the layered images; possible values are: \&quot;center\&quot;, \&quot;top-left\&quot;, \&quot;top-center\&quot;, \&quot;top-right\&quot;, \&quot;center-left\&quot;, \&quot;center-right\&quot;, \&quot;bottom-left\&quot;, \&quot;bottom-center\&quot;, \&quot;bottom-right\&quot;
  # @param base_image Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.
  # @param layered_image Image to layer on top of the base image.
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'edit_composite_basic test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for edit_contrast_adaptive
  # Adaptively adjust the contrast of the image to be more appealing and easy to see
  # Uses Gamma to adjust the contrast adaptively the way the human eye sees the world.  Results significantly improve the viewability and visual appeal of the image.
  # @param gamma Gamma value to adjust the contrast in the image.  Recommended value is 2.0.  Values between 0.0 and 1.0 will reduce contrast, while values above 1.0 will increase contrast.
  # @param image_file Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'edit_contrast_adaptive test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for edit_draw_polygon
  # Draw polygon onto an image
  # Draw one or more polygons, with customized visuals, onto an image
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'edit_draw_polygon test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for edit_draw_rectangle
  # Draw rectangle onto an image
  # Draw one or more rectangles, with customized visuals, onto an image
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'edit_draw_rectangle test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for edit_draw_text
  # Draw text onto an image
  # Draw one or more pieces of text, with customized visuals, onto an image
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'edit_draw_text test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for edit_rotate
  # Rotate an image any number of degrees
  # Rotates an image by an arbitrary number of degrees
  # @param degrees Degrees to rotate the image; values range from 0.0 to 360.0.
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'edit_rotate test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
