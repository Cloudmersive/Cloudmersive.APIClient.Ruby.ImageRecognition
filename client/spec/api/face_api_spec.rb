=begin
#imageapi

#Image Recognition and Processing APIs let you use Machine Learning to recognize and process images, and also perform useful image modification operations.

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'spec_helper'
require 'json'

# Unit tests for CloudmersiveImageRecognitionApiClient::FaceApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'FaceApi' do
  before do
    # run before each test
    @instance = CloudmersiveImageRecognitionApiClient::FaceApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of FaceApi' do
    it 'should create an instance of FaceApi' do
      expect(@instance).to be_instance_of(CloudmersiveImageRecognitionApiClient::FaceApi)
    end
  end

  # unit tests for face_compare
  # Compare and match faces
  # Find the faces in an input image, and compare against a reference image to determine if there is a match against the face in the reference image.  The reference image (second parameter) should contain exactly one face.
  # @param input_image Image file to perform the operation on; this image can contain one or more faces which will be matched against face provided in the second image.  Common file formats such as PNG, JPEG are supported.
  # @param match_face Image of a single face to compare and match against.
  # @param [Hash] opts the optional parameters
  # @return [FaceCompareResponse]
  describe 'face_compare test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for face_crop_first
  # Crop image to face with square crop
  # Crop an image to the face (rectangular crop).  If there is more than one face present, choose the first one.
  # @param image_file Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'face_crop_first test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for face_crop_first_round
  # Crop image to face with round crop
  # Crop an image to the face (circular/round crop).  If there is more than one face present, choose the first one.
  # @param image_file Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'face_crop_first_round test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for face_detect_age
  # Detect the age of people in an image
  # Identify the age, position, and size of human faces in an image, along with a recognition confidence level.  People in the image do NOT need to be facing the camera; they can be facing away, edge-on, etc.
  # @param image_file Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.
  # @param [Hash] opts the optional parameters
  # @return [AgeDetectionResult]
  describe 'face_detect_age test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for face_detect_gender
  # Detect the gender of people in an image
  # Identify the gender, position, and size of human faces in an image, along with a recognition confidence level.  People in the image should be facing the camera.
  # @param image_file Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.
  # @param [Hash] opts the optional parameters
  # @return [GenderDetectionResult]
  describe 'face_detect_gender test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for face_locate
  # Detect and find faces in an image
  # Locate the positions of all faces in an image
  # @param image_file Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.
  # @param [Hash] opts the optional parameters
  # @return [FaceLocateResponse]
  describe 'face_locate test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for face_locate_with_landmarks
  # Detect and find faces and landmarks eyes and nose and mouth in image
  # Locate the positions of all faces in an image, along with the eyes, eye brows, nose and mouth components of each
  # @param image_file Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.
  # @param [Hash] opts the optional parameters
  # @return [FaceLocateWithLandmarksResponse]
  describe 'face_locate_with_landmarks test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
